package Temp;

import java.awt.*;
import java.awt.event.*;
import java.beans.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;


public class Documents extends JFrame implements TreeSelectionListener{

	private JPanel contentPane;
	private JTextField textField;
	private JTree tree;
	private JTextArea prevTxt;
	
	private String name= null;
	
	private DefaultTreeModel model;
	private DefaultMutableTreeNode root;
	DefaultMutableTreeNode selected;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Documents frame = new Documents();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public Documents() {
		this.setTitle("Documents");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 500, 400);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(new BorderLayout(0, 0));
		
		CustomDialog login = new CustomDialog(this);
		login.setVisible(true);
		name = login.getLoginName();
		if(name == null){
			System.out.println("Good Bye!");
			System.exit(0);
		}
		/**
		 * Bottom Panel
		 */
		JPanel panelBot = new JPanel();
		contentPane.add(panelBot, BorderLayout.SOUTH);
		
		JButton btnOpen = new JButton("Open");
		btnOpen.addActionListener(new openListener());
		panelBot.add(btnOpen);
		
		JButton btnAdd = new JButton("Add:");
		panelBot.add(btnAdd);
		
		textField = new JTextField();
		panelBot.add(textField);
		textField.setColumns(10);
		
		JButton btnDelete = new JButton("Delete");
		panelBot.add(btnDelete);
		
		/**
		 * Top Panel(Left)
		 */
		JScrollPane scrollTree = new JScrollPane();
		contentPane.add(scrollTree, BorderLayout.WEST);
		JTree tree = new JTree(new DefaultMutableTreeNode("Files"));
		model = (DefaultTreeModel) tree.getModel();
		root = (DefaultMutableTreeNode) model.getRoot();
		tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
		tree.addTreeSelectionListener(this);
		makeTree();
		
		scrollTree.setViewportView(tree);
		scrollTree.setPreferredSize(new Dimension(200, 10));
		
		/**
		 * Top Panel(Right)
		 */
		JPanel rightPane = new JPanel();
		rightPane.setPreferredSize(new Dimension(280, 150));
		contentPane.add(rightPane, BorderLayout.EAST);
		rightPane.setLayout(new BorderLayout());
		
		JButton prevBtn = new JButton("Preview:");
		rightPane.add(prevBtn, BorderLayout.NORTH);
		prevBtn.addActionListener(new prevListener());
		
		JScrollPane scrollTxt = new JScrollPane();
		rightPane.add(scrollTxt, BorderLayout.CENTER);
		prevTxt = new JTextArea();
		prevTxt.setEditable(false);
		scrollTxt.setViewportView(prevTxt);
		
		
		
	}
	
	private class openListener implements ActionListener{
		public void actionPerformed(ActionEvent e){
//			String fileName = tree.getName();
			String fileName = "File.txt";
			Editor editFrame = new Editor(fileName);
		}
	}
	
	private class prevListener implements ActionListener{
		public void actionPerformed(ActionEvent e){
			//Only if a file is selected
			String txt = "";
			String fileName = "File.txt";
//			String fileName = tree.getName();
			try {
				Scanner scan = new Scanner(new File(fileName));
				while(scan.hasNextLine()){
					txt += scan.nextLine() + "\n";
				}
				prevTxt.setText(txt);
				prevTxt.setFont(new Font("Arial", Font.PLAIN, 10));
				
			} catch (FileNotFoundException e1) {
				System.out.println("File Not Found, Unable to Preview");
				e1.printStackTrace();
			}
			
		}
	}
	
	private DefaultMutableTreeNode makeTree() {
		
		// create ComS 319
		DefaultMutableTreeNode mammals = new DefaultMutableTreeNode("ComS 319");
		mammals.add(new DefaultMutableTreeNode("Lab_1"));
		mammals.add(new DefaultMutableTreeNode("Lab_2"));
		mammals.add(new DefaultMutableTreeNode("Portforlio_1"));
		mammals.add(new DefaultMutableTreeNode("Lab_3"));
		model.insertNodeInto(mammals, root, root.getChildCount());
		
		// create CprE 310
		DefaultMutableTreeNode reptiles = new DefaultMutableTreeNode("CprE 310");
		reptiles.add(new DefaultMutableTreeNode("HW_1"));
		reptiles.add(new DefaultMutableTreeNode("HW_2"));
		reptiles.add(new DefaultMutableTreeNode("Iguana"));
		model.insertNodeInto(reptiles, root, root.getChildCount());
		
		// create birds
		DefaultMutableTreeNode birds = new DefaultMutableTreeNode("ComS 228");
		birds.add(new DefaultMutableTreeNode("Proj_1"));
		birds.add(new DefaultMutableTreeNode("Proj_2"));
		birds.add(new DefaultMutableTreeNode("Proj_3"));
		birds.add(new DefaultMutableTreeNode("HW_1"));
		model.insertNodeInto(birds, root, root.getChildCount());
		
		// create insects
		DefaultMutableTreeNode insects = new DefaultMutableTreeNode("CprE 288");
		insects.add(new DefaultMutableTreeNode("Lab_1"));
		insects.add(new DefaultMutableTreeNode("Lab_2"));
		insects.add(new DefaultMutableTreeNode("Lab_3"));
		insects.add(new DefaultMutableTreeNode("Final_lab"));
		model.insertNodeInto(insects, root, root.getChildCount());
		
		return root;
	}
	
	@Override
	public void valueChanged(TreeSelectionEvent e) {
		selected = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
	}

}

class CustomDialog extends JDialog implements ActionListener, PropertyChangeListener {
	private HashMap hashmap;
	private static final long serialVersionUID = 1L;
	private String logName = null;
	private JTextField userText;
	private JTextField passText;
	
	
	private JOptionPane optionPane;
	private String logBtn = "Login";


	public String getLoginName() {
		return logName;
	}

	public CustomDialog(Documents aFrame) {
		super(aFrame, true);
		this.setBounds(100, 100, 350, 200);

		setTitle("Login");
		hashmap = new HashMap();
		hashmap.put("Zach", "wild");
		hashmap.put("Mike", "weems");

		JLabel username = new JLabel("Username");
		JLabel password = new JLabel("Password:");
		userText = new JTextField(10);
		passText = new JPasswordField(10);
//		label.setFont(new Font("HeadLineA", Font.BOLD, 36));
//		String mess = "Enter Your Name";
//		textField = new JTextField(10);

		Object[] array = { username, userText, password, passText};
		Object[] options = {logBtn};

		optionPane = new JOptionPane(array, JOptionPane.QUESTION_MESSAGE,
				JOptionPane.OK_OPTION, null, options, options[0]);

		setContentPane(optionPane);
		

		// Ensure the text field always gets the first focus.
		addComponentListener(new ComponentAdapter() {
			public void componentShown(ComponentEvent ce) {
				userText.requestFocusInWindow();
			}
		});

		// Register an event handler that reacts to option pane state changes.
		optionPane.addPropertyChangeListener(this);
	}

	/** This method handles events for the text field. */
	public void actionPerformed(ActionEvent e) {
		optionPane.setValue(logBtn);
	}

	/** This method reacts to state changes in the option pane. */
	public void propertyChange(PropertyChangeEvent e) {
		Object value = optionPane.getValue();

		optionPane.setValue(JOptionPane.UNINITIALIZED_VALUE);

		if (logBtn.equals(value)) {
			logName = userText.getText();
			if(hashmap.get(logName).equals(passText.getText()) ){
				passText.setText(null);
				setVisible(false);
				System.out.println(":::: "+ logName +" Joined ::::");
			}
			else{
				JOptionPane.showMessageDialog(optionPane, "Username or Password is invalid.");
			}
			
		} 
	}

}
